Index: Main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os\r\nimport sys\r\n\r\nimport pyqtgraph\r\nfrom PyQt5 import QtWidgets, QtCore\r\nfrom PyQt5.QtGui import QColor, QPixmap\r\nfrom PyQt5.QtPrintSupport import QPrinter\r\nfrom PyQt5.QtWidgets import QApplication, QFileDialog, QMainWindow, QTextEdit\r\nfrom pyqtgraph.exporters import ImageExporter\r\n\r\nimport Heliocs\r\nimport график\r\n\r\nclass MainWindow(Heliocs.Ui_MainWindow, QtWidgets.QMainWindow):\r\n    commonList= []\r\n    file = \"\"\r\n    graphic = ''\r\n    def __init__(self):\r\n        super(MainWindow, self).__init__()\r\n        self.graphic = график.Ui_Form()\r\n        self.setupUi(self)\r\n        self.davl_gr = self.graphic.graph.plot([],[])\r\n        self.konc_gr = self.graphic.graph.plot([],[])\r\n        self.temp_gr = self.graphic.graph.plot([],[])\r\n        self.obiem_gr = self.graphic.graph.plot([],[])\r\n        self.chastota_gr = self.graphic.graph.plot([],[])\r\n        self.potok_gr = self.graphic.graph.plot([],[])\r\n        self.minutni_gr = self.graphic.graph.plot([],[])\r\n        self.spo2_gr= self.graphic.graph.plot([],[])\r\n        self.pulse_gr = self.graphic.graph.plot([],[])\r\n        self.patientButton.clicked.connect(self.patientButtonClicked)\r\n        self.inh_1.clicked.connect(self.inhGraph)\r\n        self.inhTable.itemClicked.connect(self.tableClicked)\r\n        self.graphic.pushButton.clicked.connect(self.saver)\r\n\r\n    def patientButtonClicked(self):\r\n        self.file = str(QFileDialog.getExistingDirectory(self, 'Выбор папки...'))\r\n        self.commonList = []\r\n        if len(list(os.walk(self.file))) != 0:\r\n            for i in list(os.walk(self.file))[0][1]:\r\n                self.commonList.append(i)\r\n            self.patientListTunning()\r\n\r\n\r\n    def patientListTunning(self):\r\n        lenPatientList = len(self.commonList)\r\n        self.patientList.clear()\r\n        i = 0\r\n        if lenPatientList > 0:\r\n            while i < len(self.commonList):\r\n                if \"patientData\" in list(os.listdir(os.path.join(self.file, self.commonList[i]))):\r\n                    self.patientList.addItem(self.commonList[i])\r\n                    i += 1\r\n                else:\r\n                    self.commonList.remove(self.commonList[i])\r\n        self.patientList.setMinimumWidth(self.patientList.sizeHintForColumn(0) + 30)\r\n        self.patientList.itemClicked.connect(self.selectPatient)\r\n\r\n\r\n    def selectPatient(self):\r\n        self.clear()\r\n        if os.path.isfile(os.path.join(self.file, self.commonList[self.patientList.currentRow()], 'patientData')):\r\n            with open(os.path.join(self.file, self.commonList[self.patientList.currentRow()], 'patientData'), 'r', encoding='UTF-8') as patientData:\r\n                data = list(patientData.read().split(';'))\r\n                if len(data) >= 6:\r\n                    self.id_w.setText(data[0])\r\n                    if len(data[1].split(\" \")) >= 1:\r\n                        self.surname_w.setText(data[1].split(\" \")[0])\r\n                        if len(data[1].split(\" \")) >= 2:\r\n                            self.name_w.setText(data[1].split(\" \")[1])\r\n                            if len(data[1].split(\" \")) >= 3:\r\n                                self.patronymic_w.setText(data[1].split(\" \")[2])\r\n\r\n                    self.birhday_w.setText(data[2])\r\n                    self.gender_w.setText(data[3])\r\n                    self.weight_w.setText(data[4])\r\n                    self.heigh_w.setText(data[5])\r\n                else:\r\n                    self.clear()\r\n        else:\r\n            self.clear()\r\n        temp_row = 1\r\n        self.inhTable.setRowCount(1)\r\n        for i in os.listdir(os.path.join(self.file, self.commonList[self.patientList.currentRow()])):\r\n            if i.endswith('.csv'):\r\n                with open(os.path.join(self.file, self.commonList[self.patientList.currentRow()], i), 'r', encoding='UTF-8') as filedata:\r\n                    fullinfo = list(filedata.read().split(\"\\n\"))\r\n                    info = fullinfo[len(fullinfo)-2]\r\n                    self.inhTable.setRowCount(temp_row)\r\n                    if info[0] == '#':\r\n                        info = list(info.split(';'))\r\n                        info = info[2:9]\r\n                        for y in range(0,7):\r\n                            self.inhTable.setItem(temp_row-1, y, QtWidgets.QTableWidgetItem(info[y]))\r\n                        self.inhTable.setItem(temp_row-1, 7, QtWidgets.QTableWidgetItem(i))\r\n                    else:\r\n                        for y in range(0,8):\r\n                            self.inhTable.setItem(temp_row-1, y, QtWidgets.QTableWidgetItem('---'))\r\n                    temp_row += 1\r\n        self.graphic.id_patient_w.setText(self.id_w.text())\r\n        temp_string = \"\"\r\n        if self.patronymic_w.text() != '---':\r\n            temp_string = self.patronymic_w.text() + ' '\r\n        if self.name_w.text() != '---':\r\n            temp_string = temp_string + self.name_w.text() + ' '\r\n        if self.surname_w.text() != '---':\r\n            temp_string = temp_string + self.surname_w.text() + ' '\r\n        self.graphic.Patientl_w.setText(temp_string)\r\n\r\n    def inhGraph(self):\r\n        self.graphic.graph.setBackground('w')\r\n        self.graphic.show()\r\n\r\n\r\n\r\n    def clear(self):\r\n        self.id_w.setText(\"---\")\r\n        self.surname_w.setText(\"---\")\r\n        self.name_w.setText(\"---\")\r\n        self.patronymic_w.setText(\"---\")\r\n        self.birhday_w.setText(\"---\")\r\n        self.gender_w.setText(\"---\")\r\n        self.weight_w.setText(\"---\")\r\n        self.heigh_w.setText(\"---\")\r\n\r\n    def clearArr(self):\r\n        self.pulse_g = [[],[]]\r\n        self.SpO2_g = [[],[]]\r\n        self.minutni_obiem_g = [[],[]]\r\n        self.potok_g =[[],[]]\r\n        self.chastota_dihaniya_g =[[],[]]\r\n        self.obiem_g =[[],[]]\r\n        self.temperatura_vdihaemoi_smesi_g =[[],[]]\r\n        self.koncetracia_O2_g = [[],[]]\r\n        self.Davlenie_v_maske_g = [[],[]]\r\n\r\n\r\n    def tableClicked(self):\r\n        self.clearArr()\r\n        self.graphic.Date_inhalation_w.setText(self.inhTable.item(self.inhTable.currentRow(), 0).text())\r\n        self.graphic.dlitelnost_inh_w.setText(self.inhTable.item(self.inhTable.currentRow(),1).text())\r\n        if os.path.exists(os.path.join(self.file, self.commonList[self.patientList.currentRow()],\r\n                                   self.inhTable.item(self.inhTable.currentRow(), 7).text())):\r\n            with open(os.path.join(self.file, self.commonList[self.patientList.currentRow()],\r\n                                   self.inhTable.item(self.inhTable.currentRow(), 7).text()), 'r', encoding=\"UTF-8\") as currentlog:\r\n                logfile = currentlog.read().split('\\n')\r\n                for i in logfile:\r\n                    i = i[0:len(i)-2]\r\n                    i = i.split(';')\r\n                    if len(i) > 20 and i[0] != '#':\r\n                        self.Davlenie_v_maske_g[0].append(int(i[0])/100)\r\n                        self.koncetracia_O2_g[0].append(int(i[0])/100)\r\n                        self.temperatura_vdihaemoi_smesi_g[0].append(int(i[0])/100)\r\n                        self.obiem_g[0].append(int(i[0])/100)\r\n                        self.chastota_dihaniya_g[0].append(int(i[0])/100)\r\n                        self.potok_g[0].append(int(i[0])/100)\r\n                        self.minutni_obiem_g[0].append(int(i[0])/100)\r\n                        self.SpO2_g[0].append(int(i[0])/100)\r\n                        self.pulse_g[0].append(int(i[0])/100)\r\n                        self.Davlenie_v_maske_g[1].append(int(i[4]) / 100)\r\n                        self.koncetracia_O2_g[1].append(int(i[5]))\r\n                        self.temperatura_vdihaemoi_smesi_g[1].append(int(i[6]))\r\n                        self.obiem_g[1].append(int(i[7]))\r\n                        self.chastota_dihaniya_g[1].append(int(i[8]))\r\n                        self.potok_g[1].append(int(i[9])/10)\r\n                        self.minutni_obiem_g[1].append(int(i[14]))\r\n                        self.SpO2_g[1].append(int(i[19]))\r\n                        self.pulse_g[1].append(int(i[20]))\r\n                self.Davl()\r\n                self.Konc()\r\n                self.Temp()\r\n                self.Obiem()\r\n                self.Chastota()\r\n                self.Potok()\r\n                self.Minutni()\r\n                self.SpO2()\r\n                self.Pulse()\r\n                self.graphic.Davlenie_v_maske.toggled.connect(self.Davl)\r\n                self.graphic.koncetracia_O2.toggled.connect(self.Konc)\r\n                self.graphic.temperatura_vdihaemoi_smesi.toggled.connect(self.Temp)\r\n                self.graphic.obiem.toggled.connect(self.Obiem)\r\n                self.graphic.chastota_dihaniya.toggled.connect(self.Chastota)\r\n                self.graphic.potok.toggled.connect(self.Potok)\r\n                self.graphic.minutni_obiem.toggled.connect(self.Minutni)\r\n                self.graphic.SpO2.toggled.connect(self.SpO2)\r\n                self.graphic.pulse.toggled.connect(self.Pulse)\r\n\r\n\r\n\r\n\r\n\r\n\r\n    def Davl(self):\r\n        if self.graphic.Davlenie_v_maske.isChecked():\r\n            pen = pyqtgraph.mkPen(color=(255,0,0), width=1, style=QtCore.Qt.SolidLine)\r\n            self.davl_gr.setData(self.Davlenie_v_maske_g[0], self.Davlenie_v_maske_g[1], pen=pen)\r\n        else:\r\n            self.davl_gr.setData([],[])\r\n\r\n    def Konc(self):\r\n        if self.graphic.koncetracia_O2.isChecked():\r\n            pen = pyqtgraph.mkPen(color=(0,255,0), width=1, style=QtCore.Qt.SolidLine)\r\n            self.konc_gr.setData(self.koncetracia_O2_g[0], self.koncetracia_O2_g[1], pen=pen)\r\n        else:\r\n            self.konc_gr.setData([],[])\r\n\r\n    def Temp(self):\r\n        if self.graphic.temperatura_vdihaemoi_smesi.isChecked():\r\n            pen = pyqtgraph.mkPen(color=(0,0,255), width=1, style=QtCore.Qt.SolidLine)\r\n            self.temp_gr.setData(self.temperatura_vdihaemoi_smesi_g[0], self.temperatura_vdihaemoi_smesi_g[1], pen=pen)\r\n        else:\r\n            self.temp_gr.setData([],[])\r\n\r\n    def Obiem(self):\r\n        if self.graphic.obiem.isChecked():\r\n            pen = pyqtgraph.mkPen(color=(100,30,100), width=1, style=QtCore.Qt.SolidLine)\r\n            self.obiem_gr.setData(self.obiem_g[0], self.obiem_g[1], pen=pen)\r\n        else:\r\n            self.obiem_gr.setData([],[])\r\n\r\n    def Chastota(self):\r\n        if self.graphic.chastota_dihaniya.isChecked():\r\n            pen = pyqtgraph.mkPen(color=(0,255,255), width=1, style=QtCore.Qt.SolidLine)\r\n            self.chastota_gr.setData(self.chastota_dihaniya_g[0], self.chastota_dihaniya_g[1], pen=pen)\r\n        else:\r\n            self.chastota_gr.setData([],[])\r\n\r\n    def Potok(self):\r\n        if self.graphic.potok.isChecked():\r\n            pen = pyqtgraph.mkPen(color=(255,0,255), width=1, style=QtCore.Qt.SolidLine)\r\n            self.potok_gr.setData(self.potok_g[0], self.potok_g[1], pen=pen)\r\n        else:\r\n            self.potok_gr.setData([],[])\r\n\r\n    def Minutni(self):\r\n        if self.graphic.minutni_obiem.isChecked():\r\n            pen = pyqtgraph.mkPen(color=(100,200,100), width=1, style=QtCore.Qt.SolidLine)\r\n            self.minutni_gr.setData(self.minutni_obiem_g[0], self.minutni_obiem_g[1], pen=pen)\r\n        else:\r\n            self.minutni_gr.setData([], [])\r\n\r\n    def SpO2(self):\r\n        if self.graphic.SpO2.isChecked():\r\n            pen = pyqtgraph.mkPen(color=(100,50,100), width=1, style=QtCore.Qt.SolidLine)\r\n            self.spo2_gr.setData(self.SpO2_g[0], self.SpO2_g[1], pen=pen)\r\n        else:\r\n            self.spo2_gr.setData([], [])\r\n\r\n    def Pulse(self):\r\n        if self.graphic.pulse.isChecked():\r\n            pen = pyqtgraph.mkPen(color=(0,100,0), width=1, style=QtCore.Qt.SolidLine)\r\n            self.pulse_gr.setData(self.pulse_g[0], self.pulse_g[1], pen=pen)\r\n        else:\r\n            self.pulse_gr.setData([], [])\r\n\r\n    def saver(self):\r\n        exporter = ImageExporter(self.graphic.graph.getPlotItem())\r\n        exporter.export()\r\n        te = QTextEdit()\r\n        te.print()\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    app = QApplication(sys.argv)\r\n    window = MainWindow()\r\n    window.show()\r\n    app.exec_()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Main.py	(revision cd4d0aa7e5a9de42be138b8c4114ec3c40f93914)
+++ Main.py	(date 1593382099334)
@@ -254,10 +254,11 @@
             self.pulse_gr.setData([], [])
 
     def saver(self):
-        exporter = ImageExporter(self.graphic.graph.getPlotItem())
-        exporter.export()
-        te = QTextEdit()
-        te.print()
+        a = ImageExporter(self.graphic.graph.getPlotItem())
+
+        print(a)
+
+
 
 
 if __name__ == "__main__":
